name: Production Deployment with Approvals

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUN_VERSION: '1.2.17'
  AWS_REGION: 'us-east-2'

jobs:
  # Step 1: AWS Credential Verification with IAM Permission Checks
  verify-aws-credentials:
    name: "üîê Verify AWS Credentials & Permissions"
    runs-on: ubuntu-latest
    environment: prod  # Access secrets from prod environment + requires approval
    outputs:
      aws-verified: ${{ steps.verify.outputs.verified }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Verify AWS Identity & Basic Permissions
      id: verify
      run: |
        echo "‚úÖ AWS credentials configured successfully"
        echo "Current AWS identity:"
        aws sts get-caller-identity
        
        # Test basic IAM permissions
        echo "üîç Testing IAM permissions..."
        
        # Test S3 permissions
        echo "Testing S3 bucket access..."
        if aws s3api head-bucket --bucket "${{ secrets.S3_BUCKET_NAME }}" 2>/dev/null; then
          echo "‚úÖ S3 bucket access verified"
        else
          echo "‚ùå S3 bucket access failed - check bucket name and permissions"
          exit 1
        fi
        
        # Test S3 write permissions
        echo "Testing S3 write permissions..."
        echo "Attempting to write test file to S3 bucket in region ${{ env.AWS_REGION }}..."
        
        # Create a test file
        echo "test" > /tmp/test-write-access.txt
        
        # Try to upload with explicit region and verbose output
        if aws s3 cp /tmp/test-write-access.txt s3://${{ secrets.S3_BUCKET_NAME }}/test-write-access.txt --region ${{ env.AWS_REGION }}; then
          echo "‚úÖ S3 write test successful, cleaning up..."
          aws s3 rm s3://${{ secrets.S3_BUCKET_NAME }}/test-write-access.txt --region ${{ env.AWS_REGION }}
          echo "‚úÖ S3 write permissions verified"
        else
          echo "‚ùå S3 write permissions failed"
          echo "Debug: Checking bucket policy and permissions..."
          aws s3api get-bucket-location --bucket "${{ secrets.S3_BUCKET_NAME }}" || echo "Could not get bucket location"
          aws s3api get-bucket-policy --bucket "${{ secrets.S3_BUCKET_NAME }}" 2>/dev/null || echo "No bucket policy found or access denied"
          echo "Current AWS user permissions:"
          aws iam get-user 2>/dev/null || echo "Cannot retrieve user info"
          exit 1
        fi
        
        # Test CloudFormation permissions (required for CDK)
        echo "Testing CloudFormation permissions..."
        if aws cloudformation describe-stacks --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚úÖ CloudFormation read access verified"
        else
          echo "‚ùå CloudFormation access failed"
          exit 1
        fi
        
        # Test Lambda permissions
        echo "Testing Lambda permissions..."
        if aws lambda list-functions --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚úÖ Lambda access verified"
        else
          echo "‚ùå Lambda access failed"
          exit 1
        fi
        
        # Test API Gateway permissions
        echo "Testing API Gateway permissions..."
        if aws apigateway get-rest-apis --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚úÖ API Gateway access verified"
        else
          echo "‚ùå API Gateway access failed"
          exit 1
        fi
        
        # Test CloudFront permissions (if configured)
        if [ "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
          echo "Testing CloudFront permissions..."
          if aws cloudfront get-distribution --id "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" >/dev/null 2>&1; then
            echo "‚úÖ CloudFront distribution access verified"
          else
            echo "‚ùå CloudFront distribution access failed"
            exit 1
          fi
        fi
        
        # Test CDK bootstrap status
        echo "Checking CDK bootstrap status..."
        if aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚úÖ CDK is bootstrapped"
        else
          echo "‚ö†Ô∏è CDK not bootstrapped - will bootstrap during deployment"
        fi
        
        echo "verified=true" >> $GITHUB_OUTPUT
        echo "üéâ All AWS credential and permission verifications passed!"

  # Step 2: Build and Test Both Frontend and Backend
  build-and-test:
    name: "üèóÔ∏è Build & Test"
    runs-on: ubuntu-latest
    needs: verify-aws-credentials
    if: needs.verify-aws-credentials.outputs.aws-verified == 'true'
    outputs:
      frontend-ready: ${{ steps.frontend.outputs.ready }}
      backend-ready: ${{ steps.backend.outputs.ready }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install workspace dependencies
      run: bun install
        
    - name: Frontend build and test
      id: frontend
      working-directory: ./frontend
      run: |
        echo "üé® Testing frontend build process..."
        bun run type-check
        bun run build
        
        # Verify build artifacts
        if [ -d "../build" ] && [ -f "../build/index.html" ]; then
          echo "‚úÖ Frontend build artifacts verified"
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Frontend build artifacts missing"
          exit 1
        fi
        
    - name: Backend build and test
      id: backend
      working-directory: ./backend
      run: |
        echo "üì° Testing backend build process..."
        bun run lint || echo "‚ö†Ô∏è Linting issues found"
        bun run type-check
        bun run build
        
        # Verify build artifacts
        if [ -d "dist" ] && [ -f "dist/handlers/health.js" ]; then
          echo "‚úÖ Backend build artifacts verified"
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Backend build artifacts missing"
          exit 1
        fi
        
        # Test CDK synthesis
        echo "üîç Testing CDK synthesis..."
        bun run cdk synth >/dev/null
        echo "‚úÖ CDK synthesis successful"

  # Step 3: Deploy Frontend (Manual approval required)
  deploy-frontend:
    name: "üé® Deploy Frontend"
    runs-on: ubuntu-latest
    environment: prod  # Access secrets from prod environment + requires approval
    needs: [verify-aws-credentials, build-and-test]
    if: needs.build-and-test.outputs.frontend-ready == 'true'
    outputs:
      frontend-url: ${{ steps.frontend-deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies and build
      working-directory: ./frontend
      run: |
        bun install
        bun run build
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy frontend to S3
      id: frontend-deploy
      run: |
        echo "üöÄ Deploying frontend to S3..."
        aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete --exact-timestamps --region ${{ env.AWS_REGION }}
        
        # Get S3 website URL or CloudFront URL
        if [ "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
          FRONTEND_URL="https://${{ vars.CLOUDFRONT_DOMAIN || secrets.S3_BUCKET_NAME }}.cloudfront.net"
        else
          FRONTEND_URL="https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        fi
        
        echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Frontend deployed to: $FRONTEND_URL"
        
    - name: Invalidate CloudFront cache
      if: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID != '' }}
      run: |
        echo "üåê Invalidating CloudFront cache..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"

  # Step 4: Deploy Backend with CDK (Manual approval required)
  deploy-backend:
    name: "üì° Deploy Backend & Infrastructure"
    runs-on: ubuntu-latest
    environment: prod  # Access secrets from prod environment + requires approval
    needs: [verify-aws-credentials, build-and-test]
    if: needs.build-and-test.outputs.backend-ready == 'true'
    outputs:
      api-url: ${{ steps.backend-deploy.outputs.api-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Build and deploy backend with CDK
      id: backend-deploy
      working-directory: ./backend
      run: |
        echo "üèóÔ∏è Building backend..."
        bun install
        bun run build
        
        echo "üîÑ Bootstrapping CDK (if needed)..."
        if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "üì¶ Bootstrapping CDK without Docker support..."
          bun run cdk bootstrap --no-docker
        else
          echo "‚úÖ CDK already bootstrapped"
        fi
        
        echo "üöÄ Deploying backend infrastructure with CDK..."
        bun run cdk deploy HomepageStack \
          --require-approval never \
          --context environment=prod \
          --context corsOrigin="${{ vars.CORS_ORIGIN || '*' }}" \
          --context alphaVantageApiKey="${{ secrets.ALPHA_VANTAGE_API_KEY || '' }}" \
          --context marketDataApiKey="${{ secrets.MARKET_DATA_API_KEY || '' }}" \
          --outputs-file cdk-outputs.json
        
        # Extract API URL from CDK outputs
        if [ -f "cdk-outputs.json" ]; then
          API_URL=$(cat cdk-outputs.json | jq -r '.HomepageStack.ApiGatewayUrl // empty')
          if [ -n "$API_URL" ]; then
            echo "api-url=$API_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Backend deployed to: $API_URL"
          else
            echo "‚ùå Could not extract API URL from CDK outputs"
            exit 1
          fi
        else
          echo "‚ùå CDK outputs file not found"
          exit 1
        fi
        
    - name: Test API health endpoint
      run: |
        API_URL="${{ steps.backend-deploy.outputs.api-url }}"
        # Remove trailing slash from API_URL if present, then add the endpoint path
        API_URL=$(echo "$API_URL" | sed 's/\/$//')
        HEALTH_ENDPOINT="$API_URL/api/health"
        echo "üîç Testing API health endpoint: $HEALTH_ENDPOINT"
        
        # Wait for API to be available
        sleep 15
        
        # Retry health check up to 3 times
        for i in {1..3}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_ENDPOINT")
          if [ "$response" = "200" ]; then
            echo "‚úÖ API health check passed (attempt $i)"
            break
          else
            echo "‚ö†Ô∏è API health check failed with status: $response (attempt $i/3)"
            if [ $i -eq 3 ]; then
              echo "‚ùå API health check failed after 3 attempts"
              echo "Debug: Full response:"
              curl -s -v "$HEALTH_ENDPOINT" || true
              exit 1
            fi
            sleep 10
          fi
        done

  # Step 5: Deployment Summary
  deployment-summary:
    name: "üìã Deployment Summary"
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    
    steps:
    - name: Create deployment summary
      run: |
        echo "# üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Status:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "## ‚úÖ Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ needs.deploy-frontend.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket:** ${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
            echo "- **CloudFront:** Cache invalidated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "## ‚úÖ Backend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **API URL:** ${{ needs.deploy-backend.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Technology:** AWS CDK (Lambda + API Gateway)" >> $GITHUB_STEP_SUMMARY
          echo "- **Available Endpoints:**" >> $GITHUB_STEP_SUMMARY
          echo "  - \`GET /api/health\` - Health check" >> $GITHUB_STEP_SUMMARY
          echo "  - \`GET /api/options/stock/{symbol}\` - Stock quotes" >> $GITHUB_STEP_SUMMARY
          echo "  - \`GET /api/options/chain/{symbol}\` - Options chains" >> $GITHUB_STEP_SUMMARY
          echo "  - \`POST /api/calculator/options\` - Options calculations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Backend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the deployed applications" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor AWS CloudWatch logs for any issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Update frontend environment variables if backend URL changed" >> $GITHUB_STEP_SUMMARY
        echo "4. Verify all integrations are working correctly" >> $GITHUB_STEP_SUMMARY
