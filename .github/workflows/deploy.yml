name: Deploy to S3

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '22.12.0'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Enable Corepack
      run: corepack enable
      
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
      
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run tests (if available)
      run: |
        if yarn run --if-present test --passWithNoTests --coverage=false --ci --silent; then
          echo "Tests passed or no tests found"
        else
          echo "Tests failed, but continuing with deployment"
        fi
      continue-on-error: true
      
    - name: Build project
      run: yarn build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to S3
      run: |
        echo "Deploying to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
        aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete --exact-timestamps
        echo "‚úÖ Successfully deployed to S3"
        
    - name: Invalidate CloudFront (optional)
      if: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID != '' }}
      run: |
        echo "Invalidating CloudFront distribution: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}"
        INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" --query 'Invalidation.Id' --output text)
        echo "‚úÖ CloudFront invalidation created with ID: $INVALIDATION_ID"
        
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ Build artifacts synced to S3"
        if [ "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
          echo "üåê CloudFront cache invalidated"
        fi
